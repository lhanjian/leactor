event_accept
  handler->
    http_init_connection
http_wait_request_handler
        http_process_request_line
            http_read_request_header
                
                recv
                timer
            
        http_process_request_line
            http_parse_request_line
                0x20
  handler->
    keepalive_handler
        紧接　ngx_http_process_request_line

handler->
http_wait_request_handler


http_process_request_headers
                process_request_headers
:OK?                process_host
                    process_connection
                    process_user_agent 
                    process_header_line
                    process_unique_header_line
                    
                    
                ngx_http_process_request
                    ngx_http_handler
                        ngx_http_run_posted_requests




upstream_handler



超时->清除listen->清除conn->清除req->清除buf


pool   
    cycle
pool
    event_accept 
pool
    ngx_http_create_request
pool
    ngx_http_upstream_connect




http_core_content_phase
    ngx_http_finalize_request(r, r->content_handler(r))
        ngx_http_proxy_handler
            ngx_http_upstream_create(r)
                u->schema = {len = 7, data = 0x95e166e "http://TEST"}
        

X-Real-IP: 218.75.123.186\r\nX-Forwarded-For

重发时机


SO_REUSEPORT


request_line
request_header
    request_header_field

ngx_http_upstream_process_header
ngx_http_upstream_copy_content_type
ngx_strcasecmp(u_char *s1, u_char *s2)
// implement our own ngx_strcasecmp()/ngx_strncasecmp()
 * to avoid libc locale overhead.   



对于不需要与IO相关的事件，应该在哪一层实现？
根本就不要readylist？



Readable/Writable/Timer/

Readable = ConnectionSuccess | ConnectionClose
ConnectionSuccess = 




. The most severely contended locks include inode_lock and dcache_lock which are unnecessary for pseudo file systems like sockfs

Non Local Process of Connections
    Net-RX SoftIRQ in interrupt context
    Application and System Call in process context
Two phases are often handles by different CPU cores
    Introduces lock contentions
    Causes CPU cache bouncing.

Intensive synchronization for Inode and Dentry in VFS 

vfs_cache_pressure
------------------

This percentage value controls the tendency of the kernel to reclaim
the memory which is used for caching of directory and inode objects.

At the default value of vfs_cache_pressure=100 the kernel will attempt to
reclaim dentries and inodes at a "fair" rate with respect to pagecache and
swapcache reclaim.  Decreasing vfs_cache_pressure causes the kernel to prefer
to retain dentry and inode caches. When vfs_cache_pressure=0, the kernel will
never reclaim dentries and inodes due to memory pressure and this can easily
lead to out-of-memory conditions. Increasing vfs_cache_pressure beyond 100
causes the kernel to prefer to reclaim dentries and inodes.

Increasing vfs_cache_pressure significantly beyond 100 may have negative
performance impact. Reclaim code needs to take various locks to find freeable
directory and inode objects. With vfs_cache_pressure=1000, it will look for
ten times more freeable objects than there are.

一回accept一堆，还是一个？


HTTP-Version SP  Status-Code SP Reason-Phrase SP CRLF
HTTP/1.1     SP  200         SP OK            SP CRLF



Server BWS -> nginx
Date Upstream -> reverseProxy


